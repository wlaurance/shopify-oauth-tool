// Generated by CoffeeScript 1.3.3
(function() {
  var fs, get_scope, program, repl, request, spawn;

  fs = require('fs');

  program = require('commander');

  spawn = require('child_process').spawn;

  request = require('request');

  repl = require('readline');

  get_scope = function(given) {
    var item, scope, types, _i, _len;
    if ((given != null) && given !== '') {
      return given;
    }
    types = ['content', 'themes', 'products', 'customers', 'orders', 'script_tags', 'shipping'];
    scope = [];
    for (_i = 0, _len = types.length; _i < _len; _i++) {
      item = types[_i];
      scope.push("write_" + item);
    }
    return scope.join(',');
  };

  fs.readFile(__dirname + '/../package.json', function(error, data) {
    var base, browsercmd, getTempToken, rl, scope, url;
    if (error != null) {
      throw error;
    }
    program.version(JSON.parse(data).version).option('-n --shopname [string]', 'Shopname').option('-i --client_id [string]', 'ClientId').option('-c --scope [string]', 'Scope - Defaults to All').option('-s --client_secret [string]', 'ClientSecret').parse(process.argv);
    scope = get_scope(program.scope);
    base = "https://" + program.shopname + ".myshopify.com/admin/oauth";
    url = base + ("/authorize?client_id=" + program.client_id + "&scope=" + scope);
    browsercmd = (function() {
      switch (process.platform) {
        case 'darwin':
          return 'open';
        case 'linux':
          return 'xdg-open';
      }
    })();
    spawn(browsercmd, [url]);
    rl = repl.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    getTempToken = function() {
      return rl.question("Copy the ?code param from the callback url here:", function(temp_token) {
        if (!(temp_token != null) || temp_token === '') {
          return getTempToken();
        }
        return request.post({
          url: base + "/access_token",
          qs: {
            client_id: program.client_id,
            client_secret: program.client_secret,
            code: temp_token
          }
        }, function(error, req, body) {
          if (error) {
            console.log(error);
          }
          console.log(body);
          return rl.close();
        });
      });
    };
    return getTempToken();
  });

}).call(this);
